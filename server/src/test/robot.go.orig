package main

import (
	"flag"
	"fmt"
	"net"
	"os"
)

var (
	LogPath = flag.String("l", "./xdlog.log", "log path")
	UdpPort = flag.Int("p", 6667, "upd port")
)

func main() {
	socket, err := net.ListenUDP("udp4", &net.UDPAddr{
		IP:   net.IPv4(0, 0, 0, 0),
		Port: *UdpPort,
	})

	if err != nil {
		fmt.Println("Listen失败", err)
		return
	}

	fmt.Println(*LogPath)
	f, _ := os.OpenFile(*LogPath, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0777)
	defer f.Close()

	defer socket.Close()

	for {
		data := make([]byte, 2048)
		length, _, err := socket.ReadFromUDP(data)
		fmt.Println(data[:length])
		if err != nil {
			fmt.Println("读取数据失败", err)
			continue
		}
		switch err {
		case nil:
			handleMsg(length, err, data, f)
		default:
			goto DISCONNECT
		}
	}
DISCONNECT:
	err = socket.Close()
	checkError(err, "Close:")

}

func handleMsg(length int, err error, msg []byte, f *os.File) {
	if length > 0 {
		for i := 0; ; i++ {
			if msg[i] == 0 {
				break
			}
		}
		fmt.Printf("Received data: %v", string(msg[0:length]))
		fmt.Println("   length:", length)
		f.Write(msg[:length])
		f.WriteString("\n")
	}

}

func checkError(error error, info string) {
	if error != nil {
		panic("ERROR: " + info + " " + error.Error()) // terminate program
	}
}
